/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.vendadeitems;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author bruno
 */
public class TelaDeVenda extends javax.swing.JFrame {

    private String login;

    public TelaDeVenda(String login) {
        this.login = login;
        initComponents();
        carregarProdutos();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    }
    
    class ItemCarrinho {
        int idProduto;
        String nome;
        int quantidade;
        double preco;

        public ItemCarrinho(int idProduto, String nome, int quantidade, double preco) {
            this.idProduto = idProduto;
            this.nome = nome;
            this.quantidade = quantidade;
            this.preco = preco;
        }

        @Override
        public String toString() {
            return nome + " - Quantidade: " + quantidade + " - Preço: R$ " + preco;
        }
    }

    private ArrayList<ItemCarrinho> carrinho = new ArrayList<>(); // Lista do carrinho


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selecionarProduto = new javax.swing.JComboBox<>();
        adicionar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        itenscarrinho = new javax.swing.JTextArea();
        confirmarVenda = new javax.swing.JButton();
        CancelarVenda = new javax.swing.JButton();
        esvaziarCarrinho = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Bem-vindo ao menu de vendas!");

        jLabel2.setText("Adicione ao carrinho os produtos que deseja comprar:");

        selecionarProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selecionarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecionarProdutoActionPerformed(evt);
            }
        });

        adicionar.setText("Adicionar ao carrinho");
        adicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarActionPerformed(evt);
            }
        });

        jLabel3.setText("jLabel3");

        jLabel4.setText("jLabel4");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("CARRINHO");

        itenscarrinho.setColumns(20);
        itenscarrinho.setRows(5);
        jScrollPane1.setViewportView(itenscarrinho);

        jScrollPane.setViewportView(jScrollPane1);

        confirmarVenda.setText("Confirmar Venda");
        confirmarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarVendaActionPerformed(evt);
            }
        });

        CancelarVenda.setText("Cancelar");
        CancelarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarVendaActionPerformed(evt);
            }
        });

        esvaziarCarrinho.setText("Esvaziar carrinho");
        esvaziarCarrinho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esvaziarCarrinhoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addComponent(confirmarVenda)
                .addGap(31, 31, 31)
                .addComponent(CancelarVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane)
                            .addComponent(selecionarProduto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(adicionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(esvaziarCarrinho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selecionarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adicionar)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(esvaziarCarrinho, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmarVenda)
                    .addComponent(CancelarVenda))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selecionarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionarProdutoActionPerformed
        // Obtém o produto selecionado
        String produtoSelecionado = (String) selecionarProduto.getSelectedItem();

        // Verifica se um produto válido foi selecionado
        if (produtoSelecionado != null && !produtoSelecionado.equals("Selecione um produto")) {
            try (Connection conexao = Database.getConnection();
                 PreparedStatement stmt = conexao.prepareStatement("SELECT preco, estoque FROM produto WHERE nome = ?")) {

                stmt.setString(1, produtoSelecionado);
                ResultSet rs = stmt.executeQuery();

                // Se o produto for encontrado, carrega o preço e o estoque
                if (rs.next()) {
                    double preco = rs.getDouble("preco");
                    int estoque = rs.getInt("estoque");

                    // Exibe o preço e o estoque nos campos correspondentes (ou em labels)
                    jLabel3.setText("Preço: R$ " + preco); // Exibe o preço em um label
                    jLabel4.setText("Estoque: " + estoque); // Exibe o estoque em um label
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao carregar informações do produto: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Se nenhum produto válido for selecionado, limpa os campos
            jLabel3.setText("Preço: R$ 0.00");
            jLabel4.setText("Estoque: 0");
        }
    }//GEN-LAST:event_selecionarProdutoActionPerformed

    private void adicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarActionPerformed
        // Obtém o produto selecionado
        String produtoSelecionado = (String) selecionarProduto.getSelectedItem();

        // Verifica se o produto foi selecionado corretamente
        if (produtoSelecionado == null || produtoSelecionado.equals("Selecione um produto")) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um produto.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;  // Não prossegue se nenhum produto for selecionado
        }

        // Obtém o preço, estoque e id do produto selecionado
        double preco = 0;
        int estoque = 0;
        int idProduto = 0;
        try (Connection conexao = Database.getConnection();
             PreparedStatement stmt = conexao.prepareStatement("SELECT id_produto, preco, estoque FROM produto WHERE nome = ?")) {

            stmt.setString(1, produtoSelecionado);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                idProduto = rs.getInt("id_produto");
                preco = rs.getDouble("preco");
                estoque = rs.getInt("estoque");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar informações do produto: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verifica se há estoque disponível
        if (estoque <= 0) {
            JOptionPane.showMessageDialog(this, "Produto fora de estoque.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Adiciona o produto ao carrinho com quantidade 1 (ou outra lógica de quantidade)
        ItemCarrinho item = new ItemCarrinho(idProduto, produtoSelecionado, 1, preco); // Quantidade fixa como 1
        carrinho.add(item);  // Adiciona ao carrinho

        // Atualiza o conteúdo do carrinho na interface
        atualizarCarrinho();
    }//GEN-LAST:event_adicionarActionPerformed

    private void confirmarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarVendaActionPerformed
    if (carrinho.isEmpty()) {
        JOptionPane.showMessageDialog(this, "O carrinho está vazio.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    Connection conexao = null;
    try {
        conexao = Database.getConnection();
        conexao.setAutoCommit(false); // Inicia a transação

        // Verifica se há estoque suficiente
        for (ItemCarrinho item : carrinho) {
            try (PreparedStatement stmt = conexao.prepareStatement("SELECT estoque FROM produto WHERE id_produto = ?")) {
                stmt.setInt(1, item.idProduto);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next() && rs.getInt("estoque") < item.quantidade) {
                        JOptionPane.showMessageDialog(this, "Estoque insuficiente para: " + item.nome, "Erro", JOptionPane.ERROR_MESSAGE);
                        return; 
                    }
                }
            }
        }

        // Insere a venda na tabela venda, incluindo o id_usuario
        double totalVenda = calcularTotal();
        int idVenda;
        try (PreparedStatement stmtVenda = conexao.prepareStatement(
                "INSERT INTO venda (data_venda, id_usuario, total) VALUES (?, ?, ?)", PreparedStatement.RETURN_GENERATED_KEYS)) {
            stmtVenda.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
            stmtVenda.setString(2, login); // Insere o login do usuário
            stmtVenda.setDouble(3, totalVenda);
            stmtVenda.executeUpdate();
            
            try (ResultSet rsVenda = stmtVenda.getGeneratedKeys()) {
                if (!rsVenda.next()) throw new SQLException("Erro ao obter ID da venda.");
                idVenda = rsVenda.getInt(1);
            }
        }

        // Insere os itens da venda e atualiza o estoque
        for (ItemCarrinho item : carrinho) {
            try (PreparedStatement stmtItem = conexao.prepareStatement(
                    "INSERT INTO item_venda (id_venda, id_produto, quantidade, preco_unitario) VALUES (?, ?, ?, ?)")) {
                stmtItem.setInt(1, idVenda);
                stmtItem.setInt(2, item.idProduto);
                stmtItem.setInt(3, item.quantidade);
                stmtItem.setDouble(4, item.preco);
                stmtItem.executeUpdate();
            }


        }

        // Confirma a transação
        conexao.commit();
        JOptionPane.showMessageDialog(this, "Venda confirmada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        carrinho.clear();
        atualizarCarrinho();

    } catch (SQLException e) {
        if (conexao != null) {
            try {
                conexao.rollback(); // Reverte em caso de erro
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        JOptionPane.showMessageDialog(this, "Erro ao confirmar a venda: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (conexao != null) {
            try {
                conexao.close(); // Fecha a conexão no final
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    }//GEN-LAST:event_confirmarVendaActionPerformed

    private void CancelarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarVendaActionPerformed
        carrinho.clear(); // Limpa o carrinho
        atualizarCarrinho(); // Atualiza a interface
        JOptionPane.showMessageDialog(this, "Venda cancelada.", "Informação", JOptionPane.INFORMATION_MESSAGE);     // TODO add your handling code here:
    }//GEN-LAST:event_CancelarVendaActionPerformed

    private void esvaziarCarrinhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esvaziarCarrinhoActionPerformed
        carrinho.clear(); // Limpa o carrinho
        atualizarCarrinho(); // Atualiza a interface
        JOptionPane.showMessageDialog(this, "Carrinho esvaziado.", "Informação", JOptionPane.INFORMATION_MESSAGE);    // TODO add your handling code here:
    }//GEN-LAST:event_esvaziarCarrinhoActionPerformed

    private double calcularTotal() {
        double total = 0;
        for (ItemCarrinho item : carrinho) {
            total += item.preco * item.quantidade;
        }
        return total;
    }
    
    private void atualizarCarrinho() {
        StringBuilder sb = new StringBuilder();
        for (ItemCarrinho item : carrinho) {
            sb.append(item.toString()).append("\n");
        }
        sb.append("\nTotal: R$ ").append(String.format("%.2f", calcularTotal())); // Exibe o total
        itenscarrinho.setText(sb.toString()); // Atualiza o JTextArea
    }

    private void carregarProdutos() {
        try (Connection conexao = Database.getConnection();
             PreparedStatement stmt = conexao.prepareStatement("SELECT nome FROM produto");
             ResultSet rs = stmt.executeQuery()) {

            selecionarProduto.removeAllItems(); // Limpa os itens existentes
            selecionarProduto.addItem("Selecione um produto"); // Adiciona um item padrão
            while (rs.next()) {
                selecionarProduto.addItem(rs.getString("nome")); // Adiciona os produtos ao JComboBox
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar produtos: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(TelaDeVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(TelaDeVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(TelaDeVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(TelaDeVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {

            String login = "teste";
            new TelaDeVenda(login).setVisible(true);  // Modificado para passar o idUsuario
        }
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelarVenda;
    private javax.swing.JButton adicionar;
    private javax.swing.JButton confirmarVenda;
    private javax.swing.JButton esvaziarCarrinho;
    private javax.swing.JTextArea itenscarrinho;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox<String> selecionarProduto;
    // End of variables declaration//GEN-END:variables
}
